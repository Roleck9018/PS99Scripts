repeat task.wait(1) until game:IsLoaded() and game:GetService("ReplicatedStorage"):FindFirstChild("ClientModules") and game:GetService("ReplicatedStorage").ClientModules:FindFirstChild("Core") and game:GetService("ReplicatedStorage").ClientModules.Core:FindFirstChild("UIManager") and game:GetService("ReplicatedStorage").ClientModules.Core:FindFirstChild("UIManager").Apps:FindFirstChild("TransitionsApp") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TransitionsApp") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TransitionsApp"):FindFirstChild("Whiteout")
local RS = game:GetService("ReplicatedStorage")
local ReplicatedStorage = RS
local ClientData = require(RS.ClientModules.Core.ClientData)
local RouterClient = require(RS.ClientModules.Core:WaitForChild("RouterClient"):WaitForChild("RouterClient"))
local Main_Menu = require(RS.ClientModules.Core.UIManager.Apps.MainMenuApp)
local Player = game:GetService("Players").LocalPlayer
local VirtualInputManager = game:GetService("VirtualInputManager")

print("Auto Trade by Roleck")

Player.PlayerGui.DialogApp.Enabled = false

game.Players.LocalPlayer.Idled:Connect(function() 
    game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame) 
    task.wait(1)
    game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame) 
end)

for i, v in pairs(debug.getupvalue(RouterClient.init, 7)) do
    v.Name = i
end

function findPetID(petName)
    for _, entry in pairs(require(game:GetService("ReplicatedStorage").ClientDB.Inventory.InventoryDB).pets) do
        if type(entry) == "table" and string.lower(entry.name) == string.lower(petName) then
            return entry.id
        end
    end
    return nil
end

function CheckPetRarity(pn)
    for _, entry in pairs(require(game:GetService("ReplicatedStorage").ClientDB.Inventory.InventoryDB).pets) do
        if type(entry) == "table" and string.lower(entry.name) == string.lower(pn) then
            if entry.rarity == "common" then
                return "Common"
            elseif entry.rarity == "uncommon" then 
                return "Uncommon"
            elseif entry.rarity == "rare" then 
                return "Rare"
            elseif entry.rarity == "ultra_rare" then 
                return "Ultra Rare"
            elseif entry.rarity == "legendary" then 
                return "Legendary"
            end
        end
    end
end

function InvEmpty()
    for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
        if v.id == findPetID(ATConfig.PetName) then 
            return false
        end
    end
    return true
end

if ATConfig.buyPet then
    if ATConfig.CurrencyName == "Bucks" then
        CurrencyC = ClientData.get_data()[Player.Name].money
    elseif ATConfig.CurrencyName == "Event" then
        CurrencyC = (ClientData.get_data()[game.Players.LocalPlayer.Name][require(game:GetService("ReplicatedStorage").SharedModules.SharedDB.AltCurrencyData)["name"]] or 0)
    end

    NumberOfPets = math.floor(CurrencyC/ATConfig.CostC)
    RS.API:WaitForChild("ShopAPI/BuyItem"):InvokeServer("pets", findPetID(ATConfig.PetName), {["buy_count"] = NumberOfPets})
end

repeat
    if game.Players:FindFirstChild(ATConfig.MainAccUsername) and (not InvEmpty()) then
        repeat task.wait(1)
            RS.API:WaitForChild("TradeAPI/SendTradeRequest"):FireServer(game:GetService("Players"):WaitForChild(ATConfig.MainAccUsername))
        until game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible

        -- Add Pets
        count = 0
        for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
            if v.id == findPetID(ATConfig.PetName) then        
                RS.API:FindFirstChild("TradeAPI/AddItemToOffer"):FireServer(v.unique)
                count += 1
                if count >= 18 then break end
            end
        end

        -- Accept/Confirm
        while game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible do
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AcceptNegotiation"):FireServer()
            wait(0.1)
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/ConfirmTrade"):FireServer()
            wait(0.1)
        end
    end
    task.wait(1.5)
    print("Waiting for acc")
until InvEmpty()

local ScreenGui = Instance.new("ScreenGui", game.Players.LocalPlayer.PlayerGui)
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Name = "RoloxBotOverlay"
ScreenGui.Enabled = true

local Frame = Instance.new("Frame", ScreenGui)
Frame.BackgroundColor3 = Color3.new(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0, 0, 0, -70)
Frame.Size = UDim2.new(1, 0, 1, 70)

local Frame_2 = Instance.new("Frame", Frame)
Frame_2.AnchorPoint = Vector2.new(0.5, 0.5)
Frame_2.BackgroundTransparency = 1
Frame_2.Position = UDim2.new(0.5, 0, 0.5, 0)
Frame_2.Size = UDim2.new(0.75, 0, 0, 750)

local TextLabel = Instance.new("TextLabel", Frame_2)
TextLabel.BackgroundTransparency = 1
TextLabel.Size = UDim2.new(1, 0, 1, 0)
TextLabel.Font = Enum.Font.GothamBold
TextLabel.Text = [[<font color="rgb(144, 238, 144)">TRANSFER COMPLETED</font>]]
TextLabel.TextColor3 = Color3.new(1, 1, 1)
TextLabel.TextSize = 90
TextLabel.RichText = true
